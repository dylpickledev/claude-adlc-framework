name: Claude Label Trigger

# Trigger when specific labels are added to issues
on:
  issues:
    types: [labeled]

jobs:
  claude-action:
    # Only run for claude-specific labels
    if: |
      contains(github.event.label.name, 'claude:') ||
      github.event.label.name == 'investigate' ||
      github.event.label.name == 'needs-investigation'

    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write

    steps:
      - name: Checkout da-agent-hub
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Action from Label
        id: action
        run: |
          LABEL="${{ github.event.label.name }}"
          ISSUE_NUM="${{ github.event.issue.number }}"

          echo "issue_number=$ISSUE_NUM" >> $GITHUB_OUTPUT
          echo "label=$LABEL" >> $GITHUB_OUTPUT

          # Map label to action
          case "$LABEL" in
            "claude:investigate"|"investigate"|"needs-investigation")
              echo "action=investigate" >> $GITHUB_OUTPUT
              echo "agent=github-sleuth-expert" >> $GITHUB_OUTPUT
              ;;
            "claude:fix")
              echo "action=create_fix" >> $GITHUB_OUTPUT
              echo "agent=dbt-expert" >> $GITHUB_OUTPUT
              ;;
            "claude:analyze")
              echo "action=analyze" >> $GITHUB_OUTPUT
              echo "agent=da-architect" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "action=classify" >> $GITHUB_OUTPUT
              echo "agent=github-sleuth-expert" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Execute Claude Task
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          prompt: |
            # Automated Claude Task - Label Triggered

            An issue has been labeled for Claude investigation.

            ## Context
            - **Repository**: ${{ github.repository }}
            - **Issue #**: ${{ github.event.issue.number }}
            - **Trigger Label**: ${{ steps.action.outputs.label }}
            - **Action**: ${{ steps.action.outputs.action }}
            - **Agent**: ${{ steps.action.outputs.agent }}

            ## Issue Details
            **Title**: ${{ github.event.issue.title }}

            **Labels**: ${{ join(github.event.issue.labels.*.name, ', ') }}

            **Issue Body**:
            ```
            ${{ github.event.issue.body }}
            ```

            ## Task Instructions

            You've been automatically triggered by the "${{ steps.action.outputs.label }}" label.

            ### Investigation Action (${{ steps.action.outputs.action == 'investigate' && 'ACTIVE' || 'inactive' }}):
            1. Use `${{ steps.action.outputs.agent }}` to analyze the issue
            2. Check for similar issues using GitHub MCP
            3. Identify error patterns and root causes
            4. Review related code if error traces are present
            5. Post detailed findings as a comment

            ### Fix Action (${{ steps.action.outputs.action == 'create_fix' && 'ACTIVE' || 'inactive' }}):
            1. Analyze the issue and determine fix approach
            2. Use `${{ steps.action.outputs.agent }}` for domain expertise
            3. Create a fix plan with specific steps
            4. Post the plan and next steps as a comment
            5. Note: PR creation requires user confirmation

            ### Analysis Action (${{ steps.action.outputs.action == 'analyze' && 'ACTIVE' || 'inactive' }}):
            1. Deep technical analysis using `${{ steps.action.outputs.agent }}`
            2. Cross-reference with system architecture
            3. Identify downstream impacts
            4. Provide comprehensive technical report
            5. Post analysis as a comment

            ### Classification Action (${{ steps.action.outputs.action == 'classify' && 'ACTIVE' || 'inactive' }}):
            1. Classify issue type (bug, feature, data quality, infrastructure)
            2. Determine priority based on impact
            3. Suggest appropriate labels
            4. Recommend assignment or next steps
            5. Post classification as a comment

            ## Response Requirements
            - Use GitHub MCP to post your findings as a comment on issue #${{ github.event.issue.number }}
            - Reference specific line numbers if analyzing code
            - Suggest concrete next steps
            - Add appropriate labels if you can classify the issue better

            Please execute the ${{ steps.action.outputs.action }} action now.

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

      - name: Add Processing Comment
        if: success()
        run: |
          gh issue comment ${{ steps.action.outputs.issue_number }} \
            --body "ü§ñ Claude has been triggered by the \`${{ steps.action.outputs.label }}\` label. Analysis in progress..."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Summary
        if: always()
        run: |
          echo "üè∑Ô∏è Claude processed label trigger on issue #${{ steps.action.outputs.issue_number }}"
          echo "Label: ${{ steps.action.outputs.label }}"
          echo "Action: ${{ steps.action.outputs.action }}"
          echo "Agent: ${{ steps.action.outputs.agent }}"
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
