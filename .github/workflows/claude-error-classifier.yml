name: Claude Error Classification

on:
  repository_dispatch:
    types: [error-detected, issue-classification-request]
  issues:
    types: [opened]
  workflow_dispatch:
    inputs:
      repository:
        description: 'Target repository for classification'
        required: true
        type: string
      issue_number:
        description: 'Issue number to classify'
        required: true
        type: string

jobs:
  classify-error:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout da-agent-hub
      uses: actions/checkout@v4

    - name: Extract Classification Context
      id: context
      run: |
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "repository=${{ github.event.client_payload.repository }}" >> $GITHUB_OUTPUT
          echo "issue_number=${{ github.event.client_payload.issue_number }}" >> $GITHUB_OUTPUT
          echo "error_details=${{ github.event.client_payload.error_details }}" >> $GITHUB_OUTPUT
          echo "trigger=api_dispatch" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "issues" ]; then
          echo "repository=${{ github.repository }}" >> $GITHUB_OUTPUT
          echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          echo "error_details=${{ github.event.issue.body }}" >> $GITHUB_OUTPUT
          echo "trigger=issue_opened" >> $GITHUB_OUTPUT
        else
          echo "repository=${{ github.event.inputs.repository }}" >> $GITHUB_OUTPUT
          echo "issue_number=${{ github.event.inputs.issue_number }}" >> $GITHUB_OUTPUT
          echo "trigger=manual" >> $GITHUB_OUTPUT
        fi

    - name: Get Issue Details
      id: issue
      run: |
        ISSUE_DATA=$(gh issue view ${{ steps.context.outputs.issue_number }} \
          --repo ${{ steps.context.outputs.repository }} \
          --json title,body,labels,createdAt,author)

        echo "title<<EOF" >> $GITHUB_OUTPUT
        echo "$ISSUE_DATA" | jq -r '.title' >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        echo "body<<EOF" >> $GITHUB_OUTPUT
        echo "$ISSUE_DATA" | jq -r '.body' >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        echo "created_at=$(echo "$ISSUE_DATA" | jq -r '.createdAt')" >> $GITHUB_OUTPUT
        echo "author=$(echo "$ISSUE_DATA" | jq -r '.author.login')" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Search for Similar Issues
      id: similar
      run: |
        # Search for similar issues across repositories
        SIMILAR_ISSUES=$(gh search issues \
          --repo ${{ steps.context.outputs.repository }} \
          --state closed \
          --limit 10 \
          "${{ steps.issue.outputs.title }}" \
          --json number,title,state,labels,closedAt)

        echo "similar_issues<<EOF" >> $GITHUB_OUTPUT
        echo "$SIMILAR_ISSUES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Claude Error Classification
      uses: anthropics/claude-code-action@v1
      id: classification
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
        claude_args: |
          --model claude-3-5-sonnet-20250114
          --agent github-sleuth-expert
        prompt: |
          # Error Classification Request

          Please classify this GitHub issue and recommend immediate actions.

          ## Issue Context
          - **Repository**: ${{ steps.context.outputs.repository }}
          - **Issue #**: ${{ steps.context.outputs.issue_number }}
          - **Title**: ${{ steps.issue.outputs.title }}
          - **Created**: ${{ steps.issue.outputs.created_at }}
          - **Author**: ${{ steps.issue.outputs.author }}
          - **Trigger**: ${{ steps.context.outputs.trigger }}

          ## Issue Details
          ```
          ${{ steps.issue.outputs.body }}
          ```

          ## Similar Historical Issues
          ```json
          ${{ steps.similar.outputs.similar_issues }}
          ```

          ## Classification Instructions

          Please analyze this issue and provide a structured classification response in the following JSON format:

          ```json
          {
            "classification": {
              "type": "error|feature|bug|question",
              "subtype": "specific_classification",
              "category": "transient_failure|code_fix_required|data_quality_issue|infrastructure_issue|false_positive",
              "priority": "critical|high|medium|low",
              "complexity": 1-10,
              "confidence": 0.0-1.0
            },
            "analysis": {
              "root_cause": "description",
              "affected_systems": ["list"],
              "business_impact": "description",
              "pattern_match": "boolean",
              "recurrence_likelihood": "low|medium|high"
            },
            "recommendations": {
              "immediate_actions": ["list"],
              "expert_assignment": "dbt-expert|snowflake-expert|tableau-expert|etc",
              "monitoring_strategy": "description",
              "estimated_resolution_time": "hours|days"
            },
            "automation": {
              "labels_to_add": ["list"],
              "auto_actions": ["list"],
              "escalation_needed": "boolean",
              "next_check_hours": "number"
            }
          }
          ```

          ## Repository-Specific Context

          ### For dbt_cloud (Production Critical)
          - Focus on impact to production data pipelines
          - Prioritize schema and compilation errors
          - Consider downstream dashboard impact

          ### For roy_kent (Business Intelligence)
          - Focus on metric calculation accuracy
          - Consider business stakeholder impact
          - Prioritize semantic layer issues

          ### For da-agent-hub (Automation)
          - Focus on workflow efficiency
          - Consider cross-repository coordination
          - Prioritize agent coordination issues

          Please provide your analysis with specific focus on the repository context and actionable recommendations.
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

    - name: Parse Classification Results
      id: results
      run: |
        # Extract JSON from Claude's response
        RESPONSE="${{ steps.classification.outputs.response }}"

        # Extract the JSON block from the response
        JSON_BLOCK=$(echo "$RESPONSE" | sed -n '/```json/,/```/p' | sed '1d;$d')

        if [ -z "$JSON_BLOCK" ]; then
          echo "No JSON block found in response, using full response"
          JSON_BLOCK="$RESPONSE"
        fi

        echo "classification_json<<EOF" >> $GITHUB_OUTPUT
        echo "$JSON_BLOCK" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        # Extract key values for GitHub Actions
        echo "error_category=$(echo "$JSON_BLOCK" | jq -r '.classification.category // "unknown"')" >> $GITHUB_OUTPUT
        echo "priority=$(echo "$JSON_BLOCK" | jq -r '.classification.priority // "medium"')" >> $GITHUB_OUTPUT
        echo "expert_assignment=$(echo "$JSON_BLOCK" | jq -r '.recommendations.expert_assignment // "github-sleuth-expert"')" >> $GITHUB_OUTPUT
        echo "labels=$(echo "$JSON_BLOCK" | jq -r '.automation.labels_to_add // [] | join(",")')" >> $GITHUB_OUTPUT

    - name: Apply Classification Labels
      run: |
        # Apply labels based on classification
        LABELS="${{ steps.results.outputs.labels }}"
        CATEGORY="${{ steps.results.outputs.error_category }}"
        PRIORITY="${{ steps.results.outputs.priority }}"

        # Base labels
        gh issue edit ${{ steps.context.outputs.issue_number }} \
          --repo ${{ steps.context.outputs.repository }} \
          --add-label "claude:classified" \
          --add-label "category:$CATEGORY" \
          --add-label "priority:$PRIORITY"

        # Additional labels if specified
        if [ ! -z "$LABELS" ]; then
          IFS=',' read -ra LABEL_ARRAY <<< "$LABELS"
          for label in "${LABEL_ARRAY[@]}"; do
            gh issue edit ${{ steps.context.outputs.issue_number }} \
              --repo ${{ steps.context.outputs.repository }} \
              --add-label "$label"
          done
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Add Classification Metadata
      run: |
        # Create metadata comment
        METADATA_COMMENT=$(cat << EOF
        ## ðŸ¤– Claude Classification Results

        **Classification**: ${{ steps.results.outputs.error_category }}
        **Priority**: ${{ steps.results.outputs.priority }}
        **Recommended Expert**: ${{ steps.results.outputs.expert_assignment }}

        <details>
        <summary>Full Classification Analysis</summary>

        \`\`\`json
        ${{ steps.results.outputs.classification_json }}
        \`\`\`

        </details>

        ---
        *Auto-generated by Claude Error Classifier at $(date -u '+%Y-%m-%d %H:%M:%S UTC')*
        EOF
        )

        gh issue comment ${{ steps.context.outputs.issue_number }} \
          --repo ${{ steps.context.outputs.repository }} \
          --body "$METADATA_COMMENT"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Auto-Assign Expert
      if: steps.results.outputs.expert_assignment != 'github-sleuth-expert'
      run: |
        # Trigger expert assignment if not a sleuth task
        gh workflow run claude-collaborative-fixes.yml \
          --repo ${{ steps.context.outputs.repository }} \
          --field issue_number=${{ steps.context.outputs.issue_number }} \
          --field action=auto_assign \
          --field expert=${{ steps.results.outputs.expert_assignment }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Schedule Auto-Resolution Check
      if: steps.results.outputs.error_category == 'transient_failure'
      run: |
        # For transient failures, schedule a check in 6 hours
        echo "Scheduling auto-resolution check for transient failure"
        # This would trigger the auto-resolution-monitor workflow
        gh workflow run auto-resolution-monitor.yml \
          --field repository=${{ steps.context.outputs.repository }} \
          --field issue_number=${{ steps.context.outputs.issue_number }} \
          --field check_delay=6
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Classification Summary
      if: always()
      run: |
        echo "ðŸ“Š Classification completed for issue #${{ steps.context.outputs.issue_number }}"
        echo "Repository: ${{ steps.context.outputs.repository }}"
        echo "Category: ${{ steps.results.outputs.error_category }}"
        echo "Priority: ${{ steps.results.outputs.priority }}"
        echo "Expert: ${{ steps.results.outputs.expert_assignment }}"
        echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"