name: Auto Resolution Monitor

on:
  repository_dispatch:
    types: [issue-created, issue-updated, check-resolution]
  workflow_dispatch:
    inputs:
      repository:
        description: 'Specific repository to check (optional)'
        required: false
        type: string
      issue_number:
        description: 'Specific issue to check (optional)'
        required: false
        type: string
      check_delay:
        description: 'Hours to wait before checking (for scheduled checks)'
        required: false
        type: string
        default: '0'
  push:
    # Only validate workflow file, don't actually run jobs
    paths:
      - '.github/workflows/auto-resolution-monitor.yml'

jobs:
  workflow-info:
    runs-on: ubuntu-latest
    # Always run to provide info about why main job may skip
    steps:
    - name: Workflow Trigger Info
      run: |
        echo "üîç Auto Resolution Monitor Workflow"
        echo "Trigger: ${{ github.event_name }}"
        echo "Repository: ${{ github.event.inputs.repository || 'all' }}"
        echo "Issue Number: ${{ github.event.inputs.issue_number || 'none' }}"

        if [[ "${{ github.event_name }}" == "workflow_dispatch" && -z "${{ github.event.inputs.repository }}" && -z "${{ github.event.inputs.issue_number }}" ]]; then
          echo "‚ùå Skipping: Manual workflow dispatch requires either repository or issue_number parameter"
          echo "Use: repository parameter to check specific repo, or issue_number for specific issue"
        else
          echo "‚úÖ Proceeding to check for monitorable issues"
        fi

  check-resolutions:
    runs-on: ubuntu-latest
    # Only run if triggered by repository_dispatch or specific manual trigger
    if: |
      github.event_name == 'repository_dispatch' ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.repository != '' || github.event.inputs.issue_number != ''))

    strategy:
      matrix:
        repository: ${{ fromJson((github.event.inputs.repository && format('["{0}"]', github.event.inputs.repository)) || (github.event.client_payload.repository && format('["{0}"]', github.event.client_payload.repository | split('/') | .[1])) || '["dbt_cloud", "roy_kent", "da-agent-hub"]') }}

    steps:
    - name: Checkout da-agent-hub
      uses: actions/checkout@v4

    - name: Wait for Scheduled Delay
      if: (github.event.inputs.check_delay && github.event.inputs.check_delay != '0') || (github.event.client_payload.check_delay && github.event.client_payload.check_delay != '0')
      run: |
        DELAY_HOURS=${{ github.event.inputs.check_delay || github.event.client_payload.check_delay }}
        echo "Waiting $DELAY_HOURS hours before checking resolution..."
        sleep $((DELAY_HOURS * 3600))

    - name: Find Monitorable Issues
      id: issues
      run: |
        ISSUE_NUMBER="${{ github.event.inputs.issue_number || github.event.client_payload.issue_number }}"
        if [ ! -z "$ISSUE_NUMBER" ]; then
          # Check specific issue
          ISSUES='[{"number": '$ISSUE_NUMBER', "repository": "graniterock/${{ matrix.repository }}"}]'
        else
          # Find issues with monitoring labels
          ISSUES=$(gh search issues \
            --repo graniterock/${{ matrix.repository }} \
            --state open \
            --label "category:transient_failure,claude:classified" \
            --json number,title,labels,createdAt \
            --limit 20)
        fi

        echo "monitorable_issues<<EOF" >> $GITHUB_OUTPUT
        echo "$ISSUES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

        ISSUE_COUNT=$(echo "$ISSUES" | jq '. | length')
        echo "issue_count=$ISSUE_COUNT" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Check Each Issue for Resolution
      if: steps.issues.outputs.issue_count > 0
      uses: anthropics/claude-code-action@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        claude_code_oauth_token: ${{ secrets.ANTHROPIC_API_KEY }}
        claude_args: |
          --model claude-3-5-sonnet-20250114
          --agent issue-lifecycle-expert
        prompt: |
          # Auto-Resolution Check

          Please check if any of these issues have been automatically resolved and take appropriate actions.

          ## Repository Context
          - **Repository**: graniterock/${{ matrix.repository }}
          - **Check Type**: ${{ github.event.inputs.issue_number && 'Specific Issue' || 'Scheduled Monitoring' }}
          - **Issues to Check**: ${{ steps.issues.outputs.issue_count }}

          ## Monitorable Issues
          ```json
          ${{ steps.issues.outputs.monitorable_issues }}
          ```

          ## Resolution Check Instructions

          For each issue, please:

          1. **Determine Issue Type**: Extract the model name, error type, and classification
          2. **Check Recent Activity**: Look for recent runs, commits, or system changes
          3. **Assess Resolution Status**: Has the underlying problem been resolved?
          4. **Recommend Actions**: Close, update, or continue monitoring

          ### For dbt_cloud Repository
          - Check dbt Cloud API for recent model runs
          - Look for successful runs after the error timestamp
          - Consider if schema/data issues have been resolved

          ### For roy_kent Repository
          - Check semantic layer functionality
          - Verify metric calculations are working
          - Look for business impact resolution

          ### For da-agent-hub Repository
          - Check workflow execution status
          - Verify agent coordination is working
          - Look for system integration health

          ## Required Actions

          For each issue that should be resolved:

          1. **Add a resolution comment** explaining what was checked
          2. **Close the issue** with appropriate reason (completed/not planned)
          3. **Add resolution labels** (auto-resolved, transient-confirmed, etc.)
          4. **Update metadata** with resolution pattern

          For issues that need continued monitoring:

          1. **Update occurrence count** if error repeated
          2. **Adjust monitoring frequency** if needed
          3. **Escalate if recurring** beyond expected patterns

          Please provide specific GitHub CLI commands or API calls needed to take these actions.

    - name: Generate Resolution Report
      if: always()
      run: |
        echo "üìã Auto-Resolution Check completed"
        echo "Repository: graniterock/${{ matrix.repository }}"
        echo "Issues Checked: ${{ steps.issues.outputs.issue_count }}"
        echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"

        # Create a summary issue in da-agent-hub if significant activity
        if [ "${{ steps.issues.outputs.issue_count }}" -gt 5 ]; then
          gh issue create \
            --repo graniterock/da-agent-hub \
            --title "Auto-Resolution Report: ${{ matrix.repository }} - $(date '+%Y-%m-%d')" \
            --body "Automated resolution check processed ${{ steps.issues.outputs.issue_count }} issues in ${{ matrix.repository }}. See workflow logs for details." \
            --label "auto-generated,resolution-report"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cross-repository-analysis:
    runs-on: ubuntu-latest
    needs: check-resolutions
    # Only run on manual dispatch for pattern analysis and when there were issues to analyze
    if: |
      github.event_name == 'workflow_dispatch' &&
      needs.check-resolutions.result == 'success'

    steps:
    - name: Cross-Repository Pattern Analysis
      uses: anthropics/claude-code-action@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        claude_code_oauth_token: ${{ secrets.ANTHROPIC_API_KEY }}
        claude_args: |
          --model claude-3-5-sonnet-20250114
          --agent github-sleuth-expert
        prompt: |
          # Cross-Repository Pattern Analysis

          Please analyze error patterns and resolution effectiveness across all repositories.

          ## Analysis Scope
          - **Repositories**: dbt_cloud, roy_kent, da-agent-hub
          - **Time Window**: Last 24 hours
          - **Focus**: Auto-resolution patterns, recurring issues, system health

          ## Required Analysis

          1. **Pattern Recognition**:
             - Identify recurring error patterns across repositories
             - Look for correlation between repository issues
             - Detect any systemic problems

          2. **Resolution Effectiveness**:
             - Calculate auto-resolution success rate
             - Identify issues requiring manual intervention
             - Measure time-to-resolution improvements

          3. **System Health Indicators**:
             - Overall error volume trends
             - Priority distribution changes
             - Expert workload balance

          4. **Recommendations**:
             - Workflow automation improvements
             - Monitoring rule adjustments
             - Expert assignment optimizations

          Please provide actionable insights and specific recommendations for improving the issue tracking system.

    - name: Update Monitoring Rules
      run: |
        echo "üîÑ Cross-repository analysis completed"
        echo "Consider updating monitoring rules based on pattern analysis"
        echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"