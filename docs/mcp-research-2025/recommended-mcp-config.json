{
  "mcpServers": {
    "_comment_phase1": "=== PHASE 1: Foundation (Weeks 1-2) - Already Configured + New Additions ===",

    "dbt-mcp": {
      "command": "uvx",
      "args": ["--env-file", ".env", "dbt-mcp"],
      "disabled": false,
      "autoApprove": ["read", "compile", "test", "docs"],
      "_comment": "Already configured - Transformation layer core"
    },

    "snowflake-mcp": {
      "command": "uvx",
      "args": [
        "snowflake-labs-mcp",
        "--service-config-file",
        "config/snowflake_tools_config.yaml",
        "--connection-name",
        "default"
      ],
      "disabled": false,
      "autoApprove": ["read", "query", "search"],
      "_comment": "Already configured - Data warehouse operations"
    },

    "aws-api": {
      "command": "uvx",
      "args": ["awslabs.aws-api-mcp-server@latest"],
      "env": {
        "AWS_REGION": "us-west-2",
        "AWS_PROFILE": "default",
        "READ_OPERATIONS_ONLY": "true",
        "FASTMCP_LOG_LEVEL": "ERROR"
      },
      "disabled": false,
      "autoApprove": ["list", "describe", "get"],
      "_comment": "Already configured - AWS infrastructure state queries"
    },

    "aws-knowledge": {
      "command": "uvx",
      "args": ["awslabs.aws-knowledge-mcp-server@latest"],
      "env": {
        "FASTMCP_LOG_LEVEL": "ERROR"
      },
      "disabled": false,
      "autoApprove": ["search", "read", "recommend", "list_regions", "get_regional_availability"],
      "_comment": "Already configured - AWS documentation and best practices"
    },

    "aws-docs": {
      "command": "uvx",
      "args": ["awslabs.aws-documentation-mcp-server@latest"],
      "env": {
        "FASTMCP_LOG_LEVEL": "ERROR",
        "AWS_DOCUMENTATION_PARTITION": "aws"
      },
      "disabled": false,
      "autoApprove": ["read"],
      "_comment": "Already configured - Latest AWS documentation, blogs, What's New"
    },

    "github": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-github"],
      "env": {
        "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_PERSONAL_ACCESS_TOKEN}"
      },
      "disabled": false,
      "autoApprove": ["read", "list", "search"],
      "_comment": "NEW - Phase 1 Week 1 - Repository management, PR analysis, issue tracking"
    },

    "slack": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-slack"],
      "env": {
        "SLACK_BOT_TOKEN": "${SLACK_BOT_TOKEN}",
        "SLACK_TEAM_ID": "${SLACK_TEAM_ID}"
      },
      "disabled": false,
      "autoApprove": ["read", "post_message", "list_channels"],
      "_comment": "NEW - Phase 1 Week 1 - Team notifications, communication context"
    },

    "filesystem": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-filesystem",
        "/Users/TehFiestyGoat/da-agent-hub"
      ],
      "disabled": false,
      "autoApprove": ["read"],
      "_comment": "NEW - Phase 1 Week 1 - Secure file operations within project directories"
    },

    "_comment_phase2": "=== PHASE 1: Week 2 Additions ===",

    "git": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-git"],
      "disabled": false,
      "autoApprove": ["read", "search", "log", "diff", "show"],
      "_comment": "NEW - Phase 1 Week 2 - Repository analysis, code search, commit history"
    },

    "sequential-thinking": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-sequential-thinking"],
      "disabled": false,
      "autoApprove": ["think", "reason"],
      "_comment": "NEW - Phase 1 Week 2 - Complex problem solving, multi-step reasoning"
    },

    "time": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-time"],
      "disabled": false,
      "autoApprove": ["convert", "now", "format"],
      "_comment": "NEW - Phase 1 Week 2 - Time/timezone operations for pipeline scheduling"
    },

    "airbyte": {
      "command": "remote",
      "url": "https://airbyte-mcp.herokuapp.com",
      "disabled": false,
      "autoApprove": ["read", "generate", "list_connectors"],
      "_comment": "NEW - Phase 1 Week 2 - Data pipeline automation, connector setup"
    },

    "_comment_phase3": "=== PHASE 2: Project Management & Orchestration (Weeks 3-4) ===",

    "atlassian": {
      "command": "claude",
      "args": [
        "mcp",
        "add",
        "--transport",
        "sse",
        "atlassian",
        "https://mcp.atlassian.com/v1/sse"
      ],
      "env": {
        "ATLASSIAN_EMAIL": "${ATLASSIAN_EMAIL}",
        "ATLASSIAN_API_TOKEN": "${ATLASSIAN_API_TOKEN}",
        "ATLASSIAN_SITE_URL": "${ATLASSIAN_SITE_URL}"
      },
      "disabled": false,
      "autoApprove": ["read", "search", "list"],
      "_comment": "NEW - Phase 2 Week 3 - Jira issue tracking + Confluence documentation"
    },

    "orchestra-mcp": {
      "command": "uvx",
      "args": ["--env-file", ".env", "orchestra-mcp"],
      "disabled": false,
      "autoApprove": [
        "list_workflows",
        "get_workflow_status",
        "get_workflow_history",
        "get_dependencies",
        "analyze_performance"
      ],
      "_comment": "CUSTOM - Phase 2 Week 4 - Orchestra workflow orchestration (MUST DEVELOP)"
    },

    "prefect-mcp": {
      "command": "uvx",
      "args": ["--env-file", ".env", "prefect-mcp"],
      "disabled": false,
      "autoApprove": [
        "list_flows",
        "get_flow_runs",
        "get_task_runs",
        "analyze_performance",
        "get_logs"
      ],
      "_comment": "CUSTOM - Phase 2 Week 4 - Prefect flow management (MUST DEVELOP)"
    },

    "_comment_phase4": "=== PHASE 3: Advanced Capabilities (Weeks 5-6) ===",

    "memory": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-memory"],
      "disabled": false,
      "autoApprove": ["read", "write", "search"],
      "_comment": "NEW - Phase 3 Week 5 - Knowledge graph, persistent context across sessions"
    },

    "great-expectations-mcp": {
      "command": "uvx",
      "args": ["--env-file", ".env", "great-expectations-mcp"],
      "disabled": false,
      "autoApprove": ["run_suite", "get_results", "list_expectations"],
      "_comment": "CUSTOM - Phase 3 Week 6 - Data quality testing framework (DEVELOP IF TIME)"
    },

    "_comment_phase5": "=== PHASE 4: BI Enhancement (Weeks 7-10) ===",

    "tableau-enhanced-mcp": {
      "command": "uvx",
      "args": ["--env-file", ".env", "tableau-enhanced-mcp"],
      "disabled": false,
      "autoApprove": [
        "parse_workbook",
        "analyze_performance",
        "optimize_datasource",
        "get_usage_metrics"
      ],
      "_comment": "CUSTOM - Phase 4 Weeks 9-10 - Enhanced Tableau analysis (MUST DEVELOP)"
    },

    "_comment_optional": "=== OPTIONAL: Multi-Cloud & Additional Tools (As Needed) ===",

    "azure-mcp": {
      "command": "uvx",
      "args": ["azure-mcp@latest"],
      "env": {
        "AZURE_SUBSCRIPTION_ID": "${AZURE_SUBSCRIPTION_ID}",
        "AZURE_CLIENT_ID": "${AZURE_CLIENT_ID}",
        "AZURE_CLIENT_SECRET": "${AZURE_CLIENT_SECRET}",
        "AZURE_TENANT_ID": "${AZURE_TENANT_ID}"
      },
      "disabled": true,
      "_comment": "OPTIONAL - Enable if using Azure infrastructure"
    },

    "bigquery-mcp": {
      "command": "uvx",
      "args": ["google-cloud-mcp-bigquery@latest"],
      "env": {
        "GOOGLE_APPLICATION_CREDENTIALS": "${GOOGLE_APPLICATION_CREDENTIALS}",
        "GCP_PROJECT_ID": "${GCP_PROJECT_ID}"
      },
      "disabled": true,
      "_comment": "OPTIONAL - Enable if using BigQuery for analytics"
    },

    "notion": {
      "command": "notion-mcp",
      "env": {
        "NOTION_API_KEY": "${NOTION_API_KEY}"
      },
      "disabled": true,
      "_comment": "OPTIONAL - Alternative to Confluence for documentation"
    },

    "linear": {
      "command": "claude",
      "args": [
        "mcp",
        "add",
        "--transport",
        "sse",
        "linear",
        "https://mcp.linear.app/sse"
      ],
      "env": {
        "LINEAR_API_KEY": "${LINEAR_API_KEY}"
      },
      "disabled": true,
      "_comment": "OPTIONAL - Alternative to Jira for project management"
    },

    "asana": {
      "command": "asana-mcp",
      "env": {
        "ASANA_ACCESS_TOKEN": "${ASANA_ACCESS_TOKEN}"
      },
      "disabled": true,
      "_comment": "OPTIONAL - Alternative to Jira for project management"
    },

    "_comment_dev": "=== DEVELOPMENT & TESTING ONLY ===",

    "everything": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-everything"],
      "disabled": true,
      "_comment": "DEV ONLY - Reference server for testing all MCP features"
    },

    "fetch": {
      "command": "npx",
      "args": ["-y", "@modelcontextprotocol/server-fetch"],
      "disabled": true,
      "_comment": "OPTIONAL - Web content fetching for external documentation research"
    }
  },

  "_metadata": {
    "version": "2.0.0",
    "last_updated": "2025-10-05",
    "migration_phase": "ready_for_phase_1",
    "total_servers_configured": 12,
    "total_servers_custom_needed": 4,
    "total_servers_optional": 6,
    "environment_variables_required": [
      "GITHUB_PERSONAL_ACCESS_TOKEN",
      "SLACK_BOT_TOKEN",
      "SLACK_TEAM_ID",
      "ATLASSIAN_EMAIL",
      "ATLASSIAN_API_TOKEN",
      "ATLASSIAN_SITE_URL",
      "Orchestra API credentials (in .env)",
      "Prefect API credentials (in .env)"
    ]
  },

  "_installation_notes": {
    "phase_1_week_1": [
      "1. Add GITHUB_PERSONAL_ACCESS_TOKEN to environment",
      "2. Add SLACK_BOT_TOKEN and SLACK_TEAM_ID to environment",
      "3. Test github, slack, filesystem MCP servers",
      "4. Revive dbt-expert, snowflake-expert, enhance aws-expert"
    ],
    "phase_1_week_2": [
      "1. Install git, sequential-thinking, time MCP servers",
      "2. Configure Airbyte MCP remote connection",
      "3. Test all new MCP servers",
      "4. Revive documentation-expert, business-context"
    ],
    "phase_2_week_3": [
      "1. Add Atlassian credentials to environment",
      "2. Configure Atlassian MCP (Jira + Confluence)",
      "3. Test Jira and Confluence access",
      "4. Revive github-sleuth-expert, qa-coordinator"
    ],
    "phase_2_week_4": [
      "1. Develop Orchestra MCP server (custom)",
      "2. Develop Prefect MCP server (custom)",
      "3. Add Orchestra and Prefect API credentials",
      "4. Test custom MCP servers",
      "5. Revive orchestra-expert, prefect-expert"
    ],
    "custom_mcp_development": {
      "orchestra_mcp": {
        "priority": "CRITICAL",
        "timeline": "Week 4",
        "approach": "REST API integration",
        "tools_needed": [
          "list_workflows",
          "get_workflow_status",
          "get_workflow_history",
          "trigger_workflow",
          "get_dependencies",
          "analyze_performance"
        ]
      },
      "prefect_mcp": {
        "priority": "CRITICAL",
        "timeline": "Week 4",
        "approach": "Prefect API integration",
        "tools_needed": [
          "list_flows",
          "get_flow_runs",
          "get_task_runs",
          "analyze_performance",
          "get_logs"
        ]
      },
      "great_expectations_mcp": {
        "priority": "HIGH",
        "timeline": "Week 6 (if resources available)",
        "approach": "Python library integration",
        "tools_needed": [
          "run_suite",
          "get_results",
          "list_expectations",
          "validate_data"
        ]
      },
      "tableau_enhanced_mcp": {
        "priority": "HIGH",
        "timeline": "Weeks 9-10",
        "approach": "XML parsing + Tableau API",
        "tools_needed": [
          "parse_workbook",
          "analyze_performance",
          "optimize_datasource",
          "get_usage_metrics"
        ]
      }
    }
  },

  "_security_notes": {
    "read_only_mode": [
      "aws-api uses READ_OPERATIONS_ONLY=true for safety",
      "filesystem MCP restricted to project directory only",
      "GitHub MCP read-only access recommended initially"
    ],
    "auto_approve_policies": [
      "Read operations auto-approved for efficiency",
      "Write operations require explicit approval",
      "Destructive operations never auto-approved"
    ],
    "credential_management": [
      "All credentials stored in environment variables",
      "Never commit .env file to version control",
      "Use secret management service for production",
      "Rotate credentials regularly"
    ]
  },

  "_testing_checklist": {
    "pre_deployment": [
      "Test each MCP server independently",
      "Validate auto-approve policies",
      "Verify environment variable loading",
      "Check error handling",
      "Test specialist MCP tool usage"
    ],
    "post_deployment": [
      "Monitor MCP server uptime",
      "Track tool call success rates",
      "Measure specialist response times",
      "Validate delegation patterns",
      "Collect user feedback"
    ]
  },

  "_rollback_procedures": {
    "mcp_server_failure": [
      "1. Set 'disabled': true in config",
      "2. Restart Claude Code",
      "3. Specialists use alternative tools",
      "4. Investigate and fix issue",
      "5. Re-enable when stable"
    ],
    "specialist_failure": [
      "1. Move specialist to deprecated/",
      "2. Update role to handle directly",
      "3. Fix specialist definition",
      "4. Re-test thoroughly",
      "5. Re-enable when validated"
    ]
  }
}
